# Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use this file except in
# compliance with the License. A copy of the License is located at
#
#     http://aws.amazon.com/asl/
#
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific
# language governing permissions and limitations under the License.

---
swagger: "2.0"
info:
  version: "2017-11-07T23:47:56Z"
  title:
    Fn::Sub: ${AWS::StackName}
host: "$stageVariables.domain"
schemes:
- "https"
paths:
  /ack/{id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${EscalatorAPIRole.Arn}
        responses:
          4\d{2}:
            statusCode: "400"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"error\"\n}"
          5\d{2}:
            statusCode: "500"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"error\"\n}"
          2\d{2}:
            statusCode: "200"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"success\"\n}"
        requestTemplates:
          application/json: |
            {
              "Key": {
                "id": {
                  "S": "$input.params('id')"
                }
              },
              "TableName": "$stageVariables.pagestable",
              "UpdateExpression": "SET ack = :ack",
              "ExpressionAttributeValues": {
                ":ack": { "BOOL": true }
              },
              "ConditionExpression": "attribute_exists(id)",
              "ReturnValues": "NONE"
            }
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/UpdateItem"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /page:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Page"
        required: true
        schema:
          $ref: "#/definitions/Page"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${EscalatorAPIRole.Arn}
        responses:
          4\d{2}:
            statusCode: "400"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"error\"\n}"
          5\d{2}:
            statusCode: "500"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"error\"\n}"
          2\d{2}:
            statusCode: "200"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"success\"\n}"
        requestTemplates:
          application/json: |
            {
              "stateMachineArn": "$util.escapeJavaScript($stageVariables.sfnescalator)",
              "name": "$context.requestId",
              "input": "$util.escapeJavaScript($input.json('$'))"
            }
        uri: "arn:aws:apigateway:us-west-2:states:action/StartExecution"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
  /registerteam:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Team"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${EscalatorAPIRole.Arn}
        responses:
          4\d{2}:
            statusCode: "400"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"error\"\n}"
          5\d{2}:
            statusCode: "500"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"error\"\n}"
          2\d{2}:
            statusCode: "200"
            responseTemplates:
              application/json: "{\n  \"message\"\
                \ : \"success\"\n}"
        requestTemplates:
          application/json: |
            #set($inputroot = $input.path('$'))
            {
              "TableName": "$stageVariables.teamstable",
              "ReturnValues": "NONE",
              "Item": {
                "email": {
                  "S": "$inputroot.email"
                },
                "stages": {
                  "L": [
                    #foreach( $stage in $inputroot.stages )
                    {
                      "M": {
                        "delay": {
                          "N": "$stage.delay"
                        },
                        "email": {
                          "L": [
                            #foreach( $email in $stage.email )
                            {
                              "S": "$email"
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        },
                        "order": {
                          "N": "$stage.order"
                        }
                      }
                    }#if($foreach.hasNext),#end
                    #end
                  ]
                }
              }
            }
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/PutItem"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  Error:
    type: "object"
    properties:
      message:
        type: "string"
    title: "Error Schema"
  Team:
    type: "object"
    description: "representation of a team object"
    required:
    - "email"
    - "stages"
    properties:
      email:
        type: "string"
        description: "team identifier"
      stages:
        type: "array"
        items:
          type: "object"
          properties:
            email:
              type: "array"
              items:
                type: "string"
                description: "email address"
            delay:
              type: "integer"
              description: "seconds to wait before escalating to the next stage"
            order:
              type: "integer"
              description: "integer with priority for stage. lower numbers are paged first"
          required:
          - "email"
          - "delay"
          - "order"
  Page:
    type: "object"
    required:
    - "body"
    - "email"
    - "from"
    - "subject"
    properties:
      from:
        type: "string"
        description: "email of sender"
      email:
        type: "string"
        description: "email of team to notify"
      subject:
        type: "string"
        description: "subject of notification"
      body:
        type: "string"
        description: "content of notification"
    description: "A representation of a page notification"
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
securityDefinitions:
  sigv4:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "awsSigv4"
